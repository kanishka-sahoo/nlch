name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Required for creating releases

jobs:
  detect-version:
    name: Detect Version Release
    runs-on: ubuntu-latest
    outputs:
      is_version_release: ${{ steps.check.outputs.is_version_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need history to check merge commits
      
      - name: Check if this is a version release
        id: check
        run: |
          # Only process pushes to main branch
          if [ "${{ github.event_name }}" != "push" ] || [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "is_version_release=false" >> $GITHUB_OUTPUT
            echo "version=" >> $GITHUB_OUTPUT
            echo "ℹ️ Not a push to main branch"
            exit 0
          fi
          
          # Check if this is a merge commit from a version branch
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit message: $COMMIT_MSG"
          
          # Method 1: Check if we merged from a version branch (e.g., "Merge branch 'v1.0.0'")
          VERSION=$(echo "$COMMIT_MSG" | grep -oE "Merge.*['\"]v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?['\"]" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?" || echo "")
          
          # Method 2: Check merge commit parents for version branch
          if [ -z "$VERSION" ]; then
            # Get the merged branch name from git history
            MERGED_BRANCH=$(git log -1 --merges --pretty=format:"%P" | xargs -n1 git log -1 --pretty=format:"%D" | grep -oE "origin/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?" | head -1 | sed 's/origin\///' || echo "")
            if [ -n "$MERGED_BRANCH" ]; then
              VERSION="$MERGED_BRANCH"
            fi
          fi
          
          # Method 3: Check if version was updated in main.go in this merge
          if [ -z "$VERSION" ]; then
            # Check if version was changed in the merge
            MAIN_VERSION=$(grep -o 'const version = "[^"]*"' main.go | cut -d'"' -f2)
            if [ -n "$MAIN_VERSION" ]; then
              # Check if this version was changed in the last commit
              git show HEAD~1:main.go > /tmp/old_main.go 2>/dev/null || echo 'const version = "0.0.0"' > /tmp/old_main.go
              OLD_VERSION=$(grep -o 'const version = "[^"]*"' /tmp/old_main.go | cut -d'"' -f2 2>/dev/null || echo "0.0.0")
              if [ "$MAIN_VERSION" != "$OLD_VERSION" ]; then
                VERSION="v$MAIN_VERSION"
              fi
            fi
          fi
          
          # Method 4: Look for version pattern anywhere in commit message
          if [ -z "$VERSION" ]; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?" | head -1 || echo "")
          fi
          
          if [ -n "$VERSION" ]; then
            echo "is_version_release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "🎉 Detected version release: $VERSION"
          else
            echo "is_version_release=false" >> $GITHUB_OUTPUT
            echo "version=" >> $GITHUB_OUTPUT
            echo "ℹ️ No version release detected"
          fi

  build:
    name: Build binaries
    needs: detect-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64 # Windows ARM64 support is limited
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod tidy

      - name: Build binary
        run: |
          mkdir -p dist
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
          
          # Use detected version or fallback to dev version
          VERSION="${{ needs.detect-version.outputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          
          echo "Building with version: $VERSION"
          
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags "-X main.buildVersion=${VERSION#v} -X github.com/kanishka-sahoo/nlch/internal/update.BuildVersion=${VERSION#v}" \
            -o dist/nlch-${{ matrix.goos }}-${{ matrix.goarch }}$EXT .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nlch-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/nlch-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Create Release
    needs: [detect-version, build]
    runs-on: ubuntu-latest
    if: needs.detect-version.outputs.is_version_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release files
        run: |
          # Create a flat structure for release assets
          mkdir -p release-assets
          find dist -name "nlch-*" -type f -exec cp {} release-assets/ \;
          
          # List all files to be released
          echo "Release assets:"
          ls -la release-assets/
          
          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt
          echo "Checksums generated:"
          cat checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ needs.detect-version.outputs.version }}"
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "Generating changelog from $PREV_TAG to $CURRENT_TAG"
          
          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $PREV_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Prepare release notes
          cat > release-notes.md << EOF
          ## Installation
          
          ### Quick Install
          
          **Linux/macOS:**
          \`\`\`sh
          curl -fsSL https://raw.githubusercontent.com/kanishka-sahoo/nlch/main/install.sh | bash
          \`\`\`
          
          **Windows (PowerShell):**
          \`\`\`powershell
          iwr -useb https://raw.githubusercontent.com/kanishka-sahoo/nlch/main/install.ps1 | iex
          \`\`\`
          
          ### Manual Download
          
          Download the appropriate binary for your platform below and add it to your PATH.
          
          | Platform | Architecture | Download |
          |----------|--------------|----------|
          | Linux | x64 (amd64) | [nlch-linux-amd64](https://github.com/kanishka-sahoo/nlch/releases/download/$CURRENT_TAG/nlch-linux-amd64) |
          | Linux | ARM64 | [nlch-linux-arm64](https://github.com/kanishka-sahoo/nlch/releases/download/$CURRENT_TAG/nlch-linux-arm64) |
          | macOS | x64 (Intel) | [nlch-darwin-amd64](https://github.com/kanishka-sahoo/nlch/releases/download/$CURRENT_TAG/nlch-darwin-amd64) |
          | macOS | ARM64 (Apple Silicon) | [nlch-darwin-arm64](https://github.com/kanishka-sahoo/nlch/releases/download/$CURRENT_TAG/nlch-darwin-arm64) |
          | Windows | x64 | [nlch-windows-amd64.exe](https://github.com/kanishka-sahoo/nlch/releases/download/$CURRENT_TAG/nlch-windows-amd64.exe) |
          
          ### Auto-Update
          
          If you already have nlch installed, you can update to this version by running:
          \`\`\`sh
          nlch --update
          \`\`\`
          
          ## What's Changed
          
          $CHANGELOG
          
          ## Verification
          
          You can verify the integrity of downloaded files using the checksums in \`checksums.txt\`.
          
          **Full Changelog**: https://github.com/kanishka-sahoo/nlch/compare/$PREV_TAG...$CURRENT_TAG
          EOF
          
          echo "release_notes_file=release-notes.md" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.detect-version.outputs.version }}
          name: Release ${{ needs.detect-version.outputs.version }}
          body_path: release-notes.md
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(needs.detect-version.outputs.version, '-') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Homebrew Formula
        if: ${{ !contains(needs.detect-version.outputs.version, '-') }} # Only for stable releases
        run: |
          # Calculate checksums for Homebrew formula
          AMD64_SHA=$(sha256sum release-assets/nlch-darwin-amd64 | cut -d' ' -f1)
          ARM64_SHA=$(sha256sum release-assets/nlch-darwin-arm64 | cut -d' ' -f1)
          VERSION=${{ needs.detect-version.outputs.version }}
          VERSION_NO_V=${VERSION#v}
          
          echo "Homebrew formula would be updated with:"
          echo "Version: $VERSION_NO_V"
          echo "AMD64 SHA: $AMD64_SHA"
          echo "ARM64 SHA: $ARM64_SHA"
          
          # Update the nlch.rb file with actual checksums
          sed -i "s/REPLACE_WITH_ACTUAL_AMD64_SHA256/$AMD64_SHA/g" nlch.rb
          sed -i "s/REPLACE_WITH_ACTUAL_ARM64_SHA256/$ARM64_SHA/g" nlch.rb
          sed -i "s/version \".*\"/version \"$VERSION_NO_V\"/g" nlch.rb
          
          # Show the updated formula
          echo "Updated Homebrew formula:"
          cat nlch.rb

  test-installation:
    name: Test Installation Scripts
    needs: release
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test installation script
        run: |
          # Wait a moment for release to be available
          sleep 30
          
          # Test the installation script
          chmod +x install.sh
          
          # Create a temporary install directory to avoid permission issues
          export INSTALL_DIR_OVERRIDE="$HOME/bin"
          mkdir -p "$HOME/bin"
          
          # Run the installer
          ./install.sh
          
          # Test that it works
          "$HOME/bin/nlch" --version
          
          # Test update check
          "$HOME/bin/nlch" --check-update
